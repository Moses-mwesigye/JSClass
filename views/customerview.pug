doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Young4Chicks - Customers Dashboard
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css")
    link(rel="stylesheet", href="/young-for-chicks/css/bootstrap-5.3.6/css/bootstrap.css")
    link(rel="stylesheet", href="css/bootstrap-5.3.6-dist/css/bootstrap.css")
    link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css", rel="stylesheet")
    style.
      .hexagon {
        position: relative;
        width: 110px;
        height: 60px;
        background: rgba(24, 49, 53, 0.15);
        margin: 10px auto;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid #17a2b8;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        clip-path: polygon(
          25% 5%, 75% 5%,
          100% 50%,
          75% 95%, 25% 95%,
          0% 50%
        );
        transition: transform 0.2s;
      }
      .hexagon:hover {
        transform: scale(1.07);
        box-shadow: 0 4px 16px rgba(0,255,255,0.15);
      }
      .hex-content {
        text-align: center;
        color: #fff;
        width: 100%;
      }
      .hex-content i {
        display: block;
        margin-bottom: 2px;
        font-size: 1.3rem;
      }
      .hex-content div {
        font-size: 0.95rem;
        font-weight: 500;
      }
      /* Zigzag pattern */
      .zigzag-row {
        display: flex;
        justify-content: space-between;
        flex-wrap: nowrap;
        width: 100%;
        margin: 0;
        padding: 0 2vw;
      }
      .zigzag-row .zigzag-col {
        flex: 1 1 0;
        display: flex;
        justify-content: center;
        margin-bottom: -18px; /* overlap hexagons vertically */
      }
      .zigzag-row.even {
        margin-left: 6vw;
      }
      @media (max-width: 991px) {
        .zigzag-row {
          flex-wrap: wrap;
          justify-content: center;
          padding: 0;
        }
        .zigzag-row.even {
          margin-left: 0;
        }
      }
      @media (max-width: 767px) {
        .zigzag-row, .zigzag-row.even {
          flex-wrap: wrap;
          margin-left: 0 !important;
          margin-bottom: 0;
          padding: 0;
        }
        .zigzag-row .zigzag-col {
          margin-bottom: 0;
        }
        .hexagon {
          width: 90px;
          height: 48px;
        }
      }
      .zigzag-menu-fixed {
        position: sticky;
        top: 0;
        z-index: 1050;
        background: black;
        padding-top: 10px;
        padding-bottom: 10px;
      }
      /* Custom style for centering table content within its card body */
      .center-table-content {
        display: flex;
        flex-direction: column;
        align-items: center; /* Center horizontally */
        justify-content: center; /* Center vertically if space allows */
        width: 100%;
      }
  body(style="background-color: darkgreen;")
    // Zigzag Hexagon Navigation (fixed at the top)
    .zigzag-menu-fixed
      .w-100.my-4
      .zigzag-row.odd
        .zigzag-col
          a.text-decoration-none(href="/custview")
            .hexagon
              .hex-content
                div(style="color: rgb(0, 255, 255);") HOME
                  .zigzag-menu-fixed
      .w-100.my-4
      .zigzag-row.odd
        .zigzag-col
          a.text-decoration-none(href="/custreg")
            .hexagon
              .hex-content
                i.fa.fa-list(style="color:cyan;font-size:0.95rem;")
                div(style="color: rgb(0, 255, 255);") REGISTER
        .zigzag-col
          a.text-decoration-none(href="/")
            .hexagon
              .hex-content
                i.fa.fa-sign-out-alt(style="color: #0d6efd;")
                div(style="color: #0d6efd;") LOGOUT
    script(src="css/bootstrap-5.3.6/js/bootstrap.bundle.js")
    script(src="/young-for-chicks/js/include.js")
    .container.mt-4
      .row
        .col-12
          .card.border-info(style="background-color: rgba(24, 49, 53, 0.068);")
            .card-header.d-flex.justify-content-between.align-items-center
              h4(style="color: orange;") NOTE : REGISTER then make a Chicken Request
              button.btn.btn-success.btn-sm(type="button", onclick="showAddForm()")
                i.fa.fa-plus
                | Â Add
            .card-body
              // Add Form (hidden by default)
              form#addRequestForm.mb-3(style="display:none;")
                .row.g-2
                  .col-md-3
                    input#addDate.form-control(type="date", required)
                  .col-md-2
                    input#addChicks.form-control(type="number", placeholder="Total Chicks", min="1", required)
                  .col-md-3
                    input#addFarmer.form-control(type="text", placeholder="Farmer", required)
                  .col-md-2
                    button.btn.btn-primary.btn-sm(type="submit") Save
                    button.btn.btn-secondary.btn-sm(type="button", onclick="hideAddForm()") Cancel
              table.table.table-striped
                thead
                  tr
                    th Date Submitted
                    th Total Chicks
                    th Farmer
                    th Total Price
                    th Approved
                    th Actions
                tbody#requestsTableBody
                  // Filled by JS
    .container-fluid.mt-4
      // Payments Tables
      .row.mt-4
        .col-md-6
          .card
            .card-header.bg-primary.text-white Bank Payments 
            .card-body
              form#addBankPaymentForm.mb-2
                input#bankName.form-control.mb-2(type="text", placeholder="Name of farmer", required)
                input#bankAmount.form-control.mb-2(type="number", placeholder="Add Bank Payment", required)
                select#bankNotes.form-select.mb-2(required)
                  option(value="broilers") broilers
                  option(value="layers") layers
                  option(value="exotic") exotic
                button.btn.btn-success.btn-sm(type="submit") Add

        .col-md-6
          .card
            .card-header.bg-primary.text-white MOMO Payments
            .card-body
              form#addMomoPaymentForm.mb-2
                input#momoName.form-control.mb-2(type="text", placeholder="Name of farmer", required)
                input#momoAmount.form-control.mb-2(type="number", placeholder="Add MOMO Payment", required)
                select#momoNotes.form-select.mb-2(required)
                  option(value="broilers") broilers
                  option(value="layers") layers
                  option(value="exotic") exotic
                button.btn.btn-success.btn-sm(type="submit") Add

      // Placeholder for other sections if needed to maintain layout
      .row.mb-4
        .col-md-8
          // This column is left empty to balance the row if you only add feeds to one side
          // You can add other content here if desired
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js")
    script.
      // --- FEEDS TABLE ---
      async function loadFeedsTable() {
        try {
          const res = await fetch('/api/feeds');
          if (!res.ok) throw new Error('Failed to fetch feeds');
          const feeds = await res.json();
          const tbody = document.getElementById('feedsTableBody');
          const totalKgsSpan = document.getElementById('totalFeedsKgs'); 
          
          if (!tbody) {
            console.error("Element with ID 'feedsTableBody' not found.");
            return;
          }
          if (!totalKgsSpan) {
            console.error("Element with ID 'totalFeedsKgs' not found.");
            return;
          }

          tbody.innerHTML = '';
          let totalKgs = 0;
          if (feeds.length === 0) {
            tbody.innerHTML = `<tr><td colspan="2" style="color:gray;">No feeds found</td></tr>`;
          } else {
            feeds.forEach(feed => {
              let kgs = parseInt(feed.kgs) || 0;
              totalKgs += kgs;
              let feedName = (typeof feed.totalFeeds === 'string' && feed.totalFeeds.trim() && feed.totalFeeds !== 'undefined') ? feed.totalFeeds : 'Feed';
              tbody.innerHTML += `<tr><td>${feedName}</td><td>${kgs}</td></tr>`;
            });
          }
          totalKgsSpan.textContent = totalKgs;
        } catch (err) {
          alert('Error loading feeds: ' + err.message);
        }
      }
      // --- PENDING CHICKEN REQUESTS TABLE (CLONED FUNCTIONALITY) ---
      async function fetchRequests() {
        try {
          const res = await fetch('/admin/requests');
          if (!res.ok) throw new Error('Failed to fetch requests');
          return await res.json();
        } catch (err) {
          alert('Error loading requests: ' + err.message);
          return [];
        }
      }
      async function loadRequestsTable() {
        const requests = await fetchRequests();
        const requestsTableBody = document.getElementById('requestsTableBody'); 
        if (!requestsTableBody) {
          console.error("Element with ID 'requestsTableBody' not found.");
          return;
        }

        requestsTableBody.innerHTML = '';
        if (requests.length === 0) {
          requestsTableBody.innerHTML = `<tr><td colspan="6" style="color:gray;">No pending requests</td></tr>`;
        } else {
          requests.forEach((r, i) => {
            let totalPrice = (parseInt(r.chicks) || 0) * 1650;
            requestsTableBody.innerHTML += `
              <tr>
                <td>${r.date || ''}</td>
                <td>${r.chicks || 0}</td>
                <td>${r.farmer || ''}</td>
                <td>${totalPrice}</td>
                <td>${r.approved ? 'Yes' : 'No'}</td>
                <td>
                  <button class="btn btn-danger btn-sm" onclick="deleteRequest('${r._id}')">Delete</button>
                </td>
              </tr>
            `;
          });
        }
      }
      async function deleteRequest(id) {
        if (!confirm('Are you sure you want to delete this request?')) return;
        try {
          const res = await fetch(`/admin/requests/${id}`, { method: 'DELETE' });
          if (!res.ok) throw new Error('Failed to delete request');
          loadRequestsTable();
        } catch (err) {
          alert('Error deleting request: ' + err.message);
        }
      }
      function editRequest(id) {
        alert('Edit functionality not implemented yet for request ID: ' + id);
      }
      // --- PAYMENTS TABLES ---
      async function loadBankPayments() {
        const res = await fetch('/api/payments/bank');
        if (!res.ok) return;
        const payments = await res.json();
        const tbody = document.getElementById('bankPaymentsTableBody');
        if (!tbody) {
          console.error("Element with ID 'bankPaymentsTableBody' not found.");
          return;
        }
        tbody.innerHTML = payments.map(pay => `
          <tr>
            <td>${pay.name}</td>
            <td>${pay.amount}</td>
            <td>
              <select class="form-select" disabled>
                <option${pay.notes === 'broilers' ? ' selected' : ''}>broilers</option>
                <option${pay.notes === 'layers' ? ' selected' : ''}>layers</option>
                <option${pay.notes === 'exotic' ? ' selected' : ''}>exotic</option>
              </select>
            </td>
            <td></td>
            <td></td>
          </tr>
        `).join('');
      }
      async function loadMomoPayments() {
        const res = await fetch('/api/payments/momo');
        if (!res.ok) return;
        const payments = await res.json();
        const tbody = document.getElementById('momoPaymentsTableBody');
        if (!tbody) {
          console.error("Element with ID 'momoPaymentsTableBody' not found.");
          return;
        }
        tbody.innerHTML = payments.map(pay => `
          <tr>
            <td>${pay.name}</td>
            <td>${pay.amount}</td>
            <td>
              <select class="form-select" disabled>
                <option${pay.notes === 'broilers' ? ' selected' : ''}>broilers</option>
                <option${pay.notes === 'layers' ? ' selected' : ''}>layers</option>
                <option${pay.notes === 'exotic' ? ' selected' : ''}>exotic</option>
              </select>
            </td>
            <td></td>
          </tr>
        `).join('');
      }
      // --- INIT ---
      window.addEventListener('DOMContentLoaded', () => {
        loadFeedsTable();
        loadBankPayments();
        loadMomoPayments();
        loadRequestsTable(); 
      });

      document.getElementById('addRequestForm').onsubmit = async function(e) {
        e.preventDefault();
        const date = document.getElementById('addDate').value;
        const chicks = parseInt(document.getElementById('addChicks').value);
        const farmer = document.getElementById('addFarmer').value.trim();
        if (!date || isNaN(chicks) || chicks < 1 || !farmer) return alert('All fields required');
        try {
          const res = await fetch('/admin/requests', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ date, chicks, farmer })
          });
          if (res.ok) {
            hideAddForm();
            loadRequestsTable(); 
          } else {
            alert('Failed to submit request');
          }
        } catch (err) {
          alert('Failed to submit request');
        }
      };

      // Bank Payment Form Submission
      document.getElementById('addBankPaymentForm').onsubmit = async function(e) {
        e.preventDefault();
        const name = document.getElementById('bankName').value.trim();
        const amount = parseFloat(document.getElementById('bankAmount').value);
        const notes = document.getElementById('bankNotes').value;
        if (!name || isNaN(amount) || !notes) return alert('All fields required');
        const res = await fetch('/api/payments/bank', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name, amount, notes })
        });
        if (res.ok) {
          this.reset();
          loadBankPayments();
        } else {
          alert('Failed to submit payment');
        }
      };

      // MOMO Payment Form Submission
      document.getElementById('addMomoPaymentForm').onsubmit = async function(e) {
        e.preventDefault();
        const name = document.getElementById('momoName').value.trim();
        const amount = parseFloat(document.getElementById('momoAmount').value);
        const notes = document.getElementById('momoNotes').value;
        if (!name || isNaN(amount) || !notes) return alert('All fields required');
        const res = await fetch('/api/payments/momo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ name, amount, notes })
        });
        if (res.ok) {
          this.reset();
          loadMomoPayments();
        } else {
          alert('Failed to submit payment');
        }
      };
    script.
      async function fetchRequests() {
          try {
              const res = await fetch('/admin/requests');
              if (!res.ok) throw new Error('Failed to fetch requests');
              return await res.json();
          } catch (err) {
              alert('Error loading requests: ' + err.message);
              return [];
          }
      }

      async function loadRequests() { 
          const requests = await fetchRequests();
          const tbody = document.getElementById('requestsTableBody');
          if (!tbody) {
            console.error("Element with ID 'requestsTableBody' not found for loadRequests().");
            return;
          }
          tbody.innerHTML = '';
          requests.forEach((r, i) => {
              let totalPrice = (parseInt(r.chicks) || 0) * 1650;
              let checked = r.approved ? 'checked' : '';
              tbody.innerHTML += `
                  <tr id="requestRow${r._id}">
                    <td><span class="request-date">${r.date}</span></td>
                    <td><span class="request-chicks">${r.chicks}</span></td>
                    <td><span class="request-farmer">${r.farmer}</span></td>
                    <td><span class="request-price">${totalPrice}</span></td>
                    <td>
                      <input type="checkbox" ${checked} disabled title="Can only be approved by admin">
                    </td>
                    <td>
                      <button class="btn btn-primary btn-sm" onclick="alert('Consult Sales Rep')">Edit</button>
                      <button class="btn btn-danger btn-sm" onclick="alert('Consult Sales Rep ')">Delete</button>
                    </td>
                  </tr>
              `;
          });
      }
      function showAddForm() {
          document.getElementById('addRequestForm').style.display = '';
      }
      function hideAddForm() {
          document.getElementById('addRequestForm').reset();
          document.getElementById('addRequestForm').style.display = 'none';
      }

      document.getElementById('addRequestForm').onsubmit = async function(e) {
          e.preventDefault();
          let date = document.getElementById('addDate').value;
          let chicks = document.getElementById('addChicks').value;
          let farmer = document.getElementById('addFarmer').value.trim();
          if (!date || !chicks || !farmer) return alert('All fields required');
          try {
              const res = await fetch('/admin/requests', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ date, chicks, farmer, agent: '', approved: false })
              });
              if (!res.ok) throw new Error('Failed to add request');
              loadRequests();
              hideAddForm();
          } catch (err) {
              alert('Error adding request: ' + err.message);
          }
      };

      async function toggleApproved(id, isChecked) {
          try {
              const res = await fetch(`/admin/requests/${id}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ approved: isChecked })
              });
              if (!res.ok) throw new Error('Failed to update approval');
              loadRequests();
          } catch (err) {
              alert('Error updating approval: ' + err.message);
          }
      }

      window.onload = function() {
          loadRequests(); 
          loadFeedsTable(); 
          loadBankPayments();
          loadMomoPayments();
      };
    script(src="css/bootstrap-5.3.6-dist/js/bootstrap.bundle.js")