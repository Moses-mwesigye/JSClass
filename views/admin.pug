extends layout.pug

block content
  html(lang="en")
    head
      meta(charset="UTF-8")
      title Young4Chicks - Admin
      link(rel="stylesheet", href="css/bootstrap-5.3.6-dist/css/bootstrap.css")
      link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css")
      link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr', crossorigin='anonymous')
    body(style="background-color: rgba(20, 11, 58, 1);")
    .container.mt-5
      .row
        .col-12
          .card.border-primary(style="background-color: rgba(24, 49, 53, 0.068);")
            .card-header.d-flex.justify-content-between.align-items-center
              h4(style="color: crimson;") Admin - Chicken Requests
              button.btn.btn-success.btn-sm(type="button" onclick="showAddForm()")
                i.fa.fa-plus
                |  Add
            .card-body
              // Add Form (hidden by default)
              form#addRequestForm.mb-3(style="display:none;")
                .row.g-2
                  .col-md-3
                    input#addDate.form-control(type="date" required)
                  .col-md-2
                    input#addChicks.form-control(type="number" placeholder="Total Chicks" min="1" required)
                  .col-md-3
                    input#addFarmer.form-control(type="text" placeholder="Farmer" required)
                  .col-md-2
                    button.btn.btn-primary.btn-sm(type="submit") Save
                    button.btn.btn-secondary.btn-sm(type="button" onclick="hideAddForm()") Cancel
              table.table.table-striped
                thead
                  tr
                    th Date Submitted
                    th Total Chicks
                    th Farmer
                    th Total Price
                    th Approved
                    th Actions
                tbody#requestsTableBody
                  // Filled by JS
    // Feeds Table (from feeds.pug)
    .container.mt-4
      .row.justify-content-center
        .col-md-6
          .card.border-success(style="background-color: rgba(24, 49, 53, 0.068);")
            .card-header
              h4(style="color: #0dcaf0;") Admin - stock
            .card-body
              table.table.table-bordered
                thead
                  tr
                    th(style="color: darkblue;") Total stock
                    th(style="color: darkblue;") quantity
                    th(style="color: darkblue;") Actions
                tbody#feedsTableBody
                  // Rows will be filled by JS
              .mt-3
                h5(style="color: chartreuse;")
                  | Total stock: 
                  span#totalFeedsKgs 0
              form#addFeedForm.mt-3
                .input-group
                  input#feedName.form-control(type="text" placeholder="stock Name" required)
                  input#feedKgs.form-control(type="number" placeholder="number" min="1" step="1" required)
                  button.btn.btn-success(type="submit") Add stock
    // Payments Table (Admin View Only)
    .container.mt-4
      .row.justify-content-center
        .col-md-8
          .card.border-warning(style="background-color: rgba(255, 193, 7, 0.07);")
            .card-header
              h4(style="color: #ffc107;") Admin - Payments Submitted
            .card-body
              table.table.table-striped
                thead
                  tr
                    th Payer
                    th Amount
                    th Method
                    th Date
                    th Chick Type
                tbody#paymentsTableBody
                  // Rows will be filled by JS
    script(src="css/bootstrap-5.3.6-dist/js/bootstrap.bundle.js")
    script.
      // --- LOGIN POPUP ---
      document.addEventListener('DOMContentLoaded', function() {
        var loginModal = document.getElementById('loginModal');
        var loginForm = document.getElementById('loginForm');
        var loginError = document.getElementById('loginError');
        var adminContent = document.getElementById('adminContent');
        // Show modal on load
        if (loginModal && loginForm && loginError && adminContent) {
          loginModal.classList.add('show');
          loginModal.style.display = 'block';
          loginForm.onsubmit = function(e) {
            e.preventDefault();
            var user = document.getElementById('loginUser').value.trim();
            var pass = document.getElementById('loginPass').value;
            if(user === 'mwesigye' && pass === 'Born256.$$') {
              loginModal.classList.remove('show');
              loginModal.style.display = 'none';
              adminContent.style.display = '';
              loginError.style.display = 'none';
            } else {
              loginError.style.display = '';
            }
          };
        }
      });

      // --- REQUESTS (DB) ---
      async function fetchRequests() {
          try {
              const res = await fetch('/admin/requests');
              if (!res.ok) throw new Error('Failed to fetch requests');
              return await res.json();
          } catch (err) {
              alert('Error loading requests: ' + err.message);
              return [];
          }
      }

      async function loadRequests() {
          const requests = await fetchRequests();
          const tbody = document.getElementById('requestsTableBody');
          tbody.innerHTML = '';
          requests.forEach((r, i) => {
              let totalPrice = (parseInt(r.chicks) || 0) * 1650;
              let checked = r.approved ? 'checked' : '';
              tbody.innerHTML += `
                  <tr id="requestRow${r._id}">
                      <td><span class="request-date">${r.date}</span></td>
                      <td><span class="request-chicks">${r.chicks}</span></td>
                      <td><span class="request-farmer">${r.farmer}</span></td>
                      <td><span class="request-price">${totalPrice}</span></td>
                      <td>
                          <input type="checkbox" ${checked} onchange="toggleApproved('${r._id}', this.checked)">
                      </td>
                      <td>
                          <button class="btn btn-primary btn-sm edit-btn" onclick="editRequest('${r._id}')">Edit</button>
                          <button class="btn btn-danger btn-sm" onclick="deleteRequest('${r._id}')">Delete</button>
                      </td>
                  </tr>
              `;
          });
      }

      function showAddForm() {
          document.getElementById('addRequestForm').style.display = '';
      }
      function hideAddForm() {
          document.getElementById('addRequestForm').reset();
          document.getElementById('addRequestForm').style.display = 'none';
      }

      document.getElementById('addRequestForm').onsubmit = async function(e) {
          e.preventDefault();
          let date = document.getElementById('addDate').value;
          let chicks = document.getElementById('addChicks').value;
          let farmer = document.getElementById('addFarmer').value.trim();
          if (!date || !chicks || !farmer) return alert('All fields required');
          try {
              const res = await fetch('/admin/requests', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ date, chicks, farmer, agent: '', approved: false })
              });
              if (!res.ok) throw new Error('Failed to add request');
              loadRequests();
              hideAddForm();
          } catch (err) {
              alert('Error adding request: ' + err.message);
          }
      };

      async function editRequest(id) {
          // Fetch the request data from the row
          const row = document.getElementById('requestRow' + id);
          const date = row.querySelector('.request-date').textContent;
          const chicks = row.querySelector('.request-chicks').textContent;
          const farmer = row.querySelector('.request-farmer').textContent;
          const approved = row.querySelector('input[type="checkbox"]').checked;
          row.innerHTML = `
              <td><input type="date" id="editRequestDate${id}" class="form-control" value="${date}"></td>
              <td><input type="number" id="editRequestChicks${id}" class="form-control" value="${chicks}"></td>
              <td><input type="text" id="editRequestFarmer${id}" class="form-control" value="${farmer}"></td>
              <td><span class="request-price">${(parseInt(chicks) || 0) * 1650}</span></td>
              <td>
                  <input type="checkbox" id="editRequestApproved${id}" ${approved ? 'checked' : ''}>
              </td>
              <td>
                  <button class="btn btn-success btn-sm save-btn" onclick="saveRequest('${id}')">Save</button>
                  <button class="btn btn-secondary btn-sm cancel-btn" onclick="loadRequests()">Cancel</button>
              </td>
          `;
      }

      async function saveRequest(id) {
          const date = document.getElementById('editRequestDate' + id).value;
          const chicks = document.getElementById('editRequestChicks' + id).value;
          const farmer = document.getElementById('editRequestFarmer' + id).value.trim();
          const approved = document.getElementById('editRequestApproved' + id).checked;
          if (!date || !chicks || !farmer) return alert('All fields required');
          try {
              const res = await fetch(`/admin/requests/${id}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ date, chicks, farmer, agent: '', approved })
              });
              if (!res.ok) throw new Error('Failed to update request');
              loadRequests();
          } catch (err) {
              alert('Error updating request: ' + err.message);
          }
      }

      async function deleteRequest(id) {
          if (!confirm('Are you sure you want to delete this request?')) return;
          try {
              const res = await fetch(`/admin/requests/${id}`, { method: 'DELETE' });
              if (!res.ok) throw new Error('Failed to delete request');
              loadRequests();
          } catch (err) {
              alert('Error deleting request: ' + err.message);
          }
      }

      async function toggleApproved(id, isChecked) {
          try {
              const res = await fetch(`/admin/requests/${id}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ approved: isChecked })
              });
              if (!res.ok) throw new Error('Failed to update approval');
              loadRequests();
          } catch (err) {
              alert('Error updating approval: ' + err.message);
          }
      }

      // Feeds Table JS
      // --- FEEDS TABLE (MongoDB) ---
      async function loadFeedsTable() {
          try {
              const res = await fetch('/api/feeds');
              if (!res.ok) throw new Error('Failed to fetch feeds');
              const feeds = await res.json();
              const tbody = document.getElementById('feedsTableBody');
              tbody.innerHTML = '';
              let totalKgs = 0;
              if (feeds.length === 0) {
                  tbody.innerHTML = `<tr><td colspan="3" style="color:gray;">No feeds found</td></tr>`;
              } else {
                  feeds.forEach(feed => {
                      let kgs = parseInt(feed.kgs) || 0;
                      totalKgs += kgs;
                      tbody.innerHTML += `
                          <tr id="feedRow${feed._id}">
                              <td><span class="feed-name">${feed.name || 'Feed'}</span></td>
                              <td><span class="feed-kgs">${kgs}</span></td>
                              <td>
                                  <button class="btn btn-primary btn-sm" onclick="editFeed('${feed._id}')">Edit</button>
                                  <button class="btn btn-danger btn-sm" onclick="deleteFeed('${feed._id}')">Delete</button>
                              </td>
                          </tr>
                      `;
                  });
              }
              document.getElementById('totalFeedsKgs').textContent = totalKgs;
          } catch (err) {
              alert('Error loading feeds: ' + err.message);
          }
      }

      document.getElementById('addFeedForm').onsubmit = async function(e) {
          e.preventDefault();
          let name = document.getElementById('feedName').value.trim();
          let kgs = parseInt(document.getElementById('feedKgs').value, 10);
          if (!name || isNaN(kgs) || kgs < 1) {
              alert('Please enter a valid feed name and integer kgs.');
              return;
          }
          try {
              const res = await fetch('/api/feeds', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ name, kgs })
              });
              if (!res.ok) throw new Error('Failed to add feed');
              loadFeedsTable();
              this.reset();
          } catch (err) {
              alert('Error adding feed: ' + err.message);
          }
      };

      async function editFeed(id) {
          const row = document.getElementById('feedRow' + id);
          const name = row.querySelector('.feed-name').textContent;
          const kgs = row.querySelector('.feed-kgs').textContent;
          row.innerHTML = `
              <td><input type="text" id="editFeedName${id}" class="form-control" value="${name}"></td>
              <td><input type="number" id="editFeedKgs${id}" class="form-control" value="${kgs}"></td>
              <td>
                  <button class="btn btn-success btn-sm" onclick="saveFeed('${id}')">Save</button>
                  <button class="btn btn-secondary btn-sm" onclick="loadFeedsTable()">Cancel</button>
              </td>
          `;
      }

      async function saveFeed(id) {
          const name = document.getElementById('editFeedName' + id).value.trim();
          const kgs = parseInt(document.getElementById('editFeedKgs' + id).value, 10);
          if (!name || isNaN(kgs) || kgs < 1) {
              alert('Please enter a valid feed name and integer kgs.');
              return;
          }
          try {
              const res = await fetch(`/api/feeds/${id}`, {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ name, kgs })
              });
              if (!res.ok) throw new Error('Failed to update feed');
              loadFeedsTable();
          } catch (err) {
              alert('Error updating feed: ' + err.message);
          }
      }

      async function deleteFeed(id) {
          if (!confirm('Are you sure you want to delete this feed?')) return;
          try {
              const res = await fetch(`/api/feeds/${id}`, { method: 'DELETE' });
              if (!res.ok) throw new Error('Failed to delete feed');
              loadFeedsTable();
          } catch (err) {
              alert('Error deleting feed: ' + err.message);
          }
      }

      // --- PAYMENTS TABLE (ADMIN VIEW ONLY) ---
      async function loadPaymentsTable() {
        try {
          const res = await fetch('/payments/all');
          if (!res.ok) throw new Error('Failed to fetch payments');
          const payments = await res.json();
          const tbody = document.getElementById('paymentsTableBody');
          tbody.innerHTML = '';
          if (payments.length === 0) {
            tbody.innerHTML = `<tr><td colspan="5" style="color:gray;">No payments submitted</td></tr>`;
          } else {
            payments.forEach(pay => {
              tbody.innerHTML += `
                <tr>
                  <td>${pay.payer || ''}</td>
                  <td>${pay.amount || ''}</td>
                  <td>${pay.method || ''}</td>
                  <td>${pay.date ? new Date(pay.date).toISOString().slice(0,10) : ''}</td>
                  <td>
                    <select class="form-select" disabled>
                      <option${pay.notes === 'broilers' ? ' selected' : ''}>broilers</option>
                      <option${pay.notes === 'layers' ? ' selected' : ''}>layers</option>
                      <option${pay.notes === 'exotic' ? ' selected' : ''}>exotic</option>
                    </select>
                  </td>
                </tr>
              `;
            });
          }
        } catch (err) {
          alert('Error loading payments: ' + err.message);
        }
      }

      window.addEventListener('DOMContentLoaded', function() {
          loadRequests();
          loadFeedsTable();
          loadPaymentsTable();
      });